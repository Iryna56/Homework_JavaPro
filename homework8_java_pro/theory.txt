1.В чем концептуальная разница между LinkedList и ArrayList?
LinkedList является структурой данных, основанной на связях между узлами, что обеспечивает гибкость при вставке и удалении элементов, но замедляет доступ к элементам. ArrayList, с другой стороны, использует непрерывный блок памяти и обеспечивает быстрый доступ к элементам по индексу, но может быть менее эффективным при вставке и удалении.
2.Для каких задач лучше выбрать LinkedList, а когда ArrayList?
Лучше всего использовать LinkedList, когда вам нужно часто выполнять вставку или удаление элементов в середине списка. Вставка и удаление элементов в LinkedList занимают постоянное время O(1), поскольку не требуется перемещение остальных элементов в памяти.
LinkedList хорошо подходит для случаев, когда вам нужно часто изменять размер списка. LinkedList не требует перераспределения памяти при изменении размера списка, поэтому такие операции выполняются быстрее, чем у ArrayList, у которого может потребоваться копирование всего массива элементов.
ArrayList предпочтительнее, когда вам нужно быстро получать доступ к элементам по индексу. Доступ к элементу по индексу в ArrayList выполняется за постоянное время O(1), так как элементы хранятся в непрерывном блоке памяти и доступ осуществляется по смещению.
ArrayList обычно занимает меньше памяти, чем LinkedList, поскольку LinkedList требует дополнительного пространства для хранения связей между элементами.
3.Какую информацию хранит каждая Node в LinkedList?
Каждая Node хранит ссылку на следующий и предыдущий узел
4.Можем ли мы добавить null в LinkedList?
Да, можем.
5.Какая сложность вставки и удаления в LinkedList? какая у ArrayList?
Сложность вставки у LinkedList - О(1), у ArrayList - О(n).
Сложность удаления у LinkedList - О(1), у ArrayList - О(n).